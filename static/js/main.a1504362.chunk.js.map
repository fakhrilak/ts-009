{"version":3,"sources":["img/logo.png","components/Form/Form.js","components/FakeData/Data.js","components/Render/Render.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","className","placeholder","DATA","nama","tingkat","cabang","lulus","nohp","Render","style","paddingTop","map","data","href","App","useState","slide","setSlide","src","Img","height","width","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,qMCwC5BC,G,YArCF,WACX,OACE,6BACE,8BACI,yBAAKC,UAAU,cACX,2BACFC,YAAY,kBAGd,yBAAKD,UAAU,cACV,2BACHC,YAAY,iBAGd,yBAAKD,UAAU,cACX,2BACFC,YAAY,2BAGd,yBAAKD,UAAU,cACZ,2BACDC,YAAY,oBAEd,yBAAKD,UAAU,cACZ,2BACDC,YAAY,eAId,yBAAKD,UAAU,cACX,+CCjCDE,EAAO,CAChB,CACIC,KAAK,cACLC,QAAS,cACTC,OAAO,aACPC,MAAM,OACNC,KAAK,eAET,CACIJ,KAAK,mBACLC,QAAS,cACTC,OAAO,aACPC,MAAM,OACNC,KAAK,eAET,CACIJ,KAAK,gBACLC,QAAS,cACTC,OAAO,aACPC,MAAM,OACNC,KAAK,eAET,CACIJ,KAAK,cACLC,QAAS,cACTC,OAAO,aACPC,MAAM,OACNC,KAAK,eAET,CACIJ,KAAK,mBACLC,QAAS,cACTC,OAAO,aACPC,MAAM,OACNC,KAAK,eAET,CACIJ,KAAK,gBACLC,QAAS,cACTC,OAAO,aACPC,MAAM,OACNC,KAAK,gBCdEC,G,MAxBA,WACb,OACE,6BACE,yBAAKC,MAAO,CAACC,WAAW,KACnBR,EAAKS,KAAI,SAACC,GAAD,OACV,oCACE,yBAAKZ,UAAU,YACX,6BACI,4BAAQA,UAAU,WAAWY,EAAKT,MAClC,2BAAIS,EAAKN,QAEb,yBAAKN,UAAU,oBACX,uBAAGa,KAAK,KAAKD,EAAKR,SAClB,uBAAGS,KAAK,KAAKD,EAAKP,QAClB,uBAAGQ,KAAK,KAAKD,EAAKL,gB,gBCKvBO,MAhBf,WAAgB,IAAD,EACUC,oBAAS,GADnB,mBACNC,EADM,KACAC,EADA,KAEb,OACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,QACb,4DAEF,yBAAKkB,IAAKC,IAAKV,MAAO,CAACW,OAAO,IAAIC,MAAM,IAAKC,QAAS,kBAAIL,GAAUD,MACrE,8BACIA,GAAS,kBAAC,EAAD,MACVA,GAAS,kBAAC,EAAD,SCJGO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1504362.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7bfeb01c.png\";","import React from 'react'\r\nimport './Form.css'\r\n\r\nconst Form = () => {\r\n  return (\r\n    <div>\r\n      <form>\r\n          <div className='form-group'>\r\n              <input\r\n            placeholder='Nama Lengkap'\r\n          />\r\n          </div>\r\n          <div className='form-group'>\r\n               <input\r\n            placeholder='Ketingkatan'\r\n          />\r\n          </div>\r\n          <div className='form-group'>\r\n              <input\r\n            placeholder='Cabang/Daerah/Wilayah'\r\n          />\r\n          </div>\r\n          <div className='form-group'>\r\n             <input\r\n            placeholder='Lulus Muallimin'\r\n          />\r\n          <div className='form-group'>\r\n             <input\r\n            placeholder='No HP/WA'\r\n          />\r\n          </div>\r\n          </div>\r\n          <div className='btn-Submit'>\r\n              <button>Submit</button>\r\n          </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","export const DATA = [\r\n    {\r\n        nama:'Hanif Azhar',\r\n        tingkat: 'Kader Madya',\r\n        cabang:'yogyakarta',\r\n        lulus:'2014',\r\n        nohp:'08374575567'\r\n    },\r\n    {\r\n        nama:'Ramadhani Ghafar',\r\n        tingkat: 'Kader Madya',\r\n        cabang:'yogyakarta',\r\n        lulus:'2014',\r\n        nohp:'08374575567'\r\n    },\r\n    {\r\n        nama:'Fakhri Dzikri',\r\n        tingkat: 'Kader Mudya',\r\n        cabang:'yogyakarta',\r\n        lulus:'2016',\r\n        nohp:'08374575567'\r\n    },\r\n    {\r\n        nama:'Hanif Azhar',\r\n        tingkat: 'Kader Madya',\r\n        cabang:'yogyakarta',\r\n        lulus:'2014',\r\n        nohp:'08374575567'\r\n    },\r\n    {\r\n        nama:'Ramadhani Ghafar',\r\n        tingkat: 'Kader Madya',\r\n        cabang:'yogyakarta',\r\n        lulus:'2014',\r\n        nohp:'08374575567'\r\n    },\r\n    {\r\n        nama:'Fakhri Dzikri',\r\n        tingkat: 'Kader Mudya',\r\n        cabang:'yogyakarta',\r\n        lulus:'2016',\r\n        nohp:'08374575567'\r\n    }\r\n]","import React from 'react'\r\nimport {DATA} from '../FakeData/Data'\r\nimport './Render.css'\r\nconst Render = () => {\r\n  return (\r\n    <div>\r\n      <div style={{paddingTop:30}}>\r\n          {DATA.map((data)=>\r\n          <>\r\n            <div className=\"dropdown\">\r\n                <div>\r\n                    <button className=\"dropbtn\">{data.nama}</button>\r\n                    <p>{data.lulus}</p>\r\n                </div>\r\n                <div className=\"dropdown-content\">\r\n                    <a href=\"#\">{data.tingkat}</a>\r\n                    <a href=\"#\">{data.cabang}</a>\r\n                    <a href=\"#\">{data.nohp}</a>\r\n                </div>\r\n            </div>\r\n          </>\r\n          )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Render\r\n","import React,{useState}from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport Render from './components/Render/Render'\nimport Img from './img/logo.png'\n\nfunction App() {\n  const [slide,setSlide]=useState(false)\n  return (\n    <div className=\"App\">\n      <div className='text'>\n        <p >Alumni Tapak Suci Mu'allimin</p>\n      </div>\n      <img src={Img} style={{height:100,width:70}} onClick={()=>setSlide(!slide)}/>\n     <div>\n       {!slide && <Form/>}\n       {slide && <Render/>}\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}