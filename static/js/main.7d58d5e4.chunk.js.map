{"version":3,"sources":["img/logo.png","config/api.js","components/Form/Form.js","redux/action/User.js","redux/action/types.js","components/Render/Render.js","redux/reducer/User.js","redux/reducer/index.js","redux/store/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API","axios","create","baseURL","connect","state","postUser","name","tingkat","cabang","lulus","nohp","dispatch","a","config","headers","body","JSON","stringify","post","res","type","payload","user","useState","formData","setFormData","onChange","e","target","value","onSubmit","preventDefault","className","placeholder","users","User","getUser","get","data","loading","useEffect","subcategoryId","C","filter","el","style","paddingTop","width","borderRadius","borderWidth","borderColor","map","Allcategory","key","id","href","initialState","error","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","slide","setSlide","src","Img","height","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7d58d5e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7bfeb01c.png\";","import axios from 'axios';\r\n// Set config defaults when creating the instance\r\nexport const API = axios.create({\r\n\tbaseURL: 'https://fakhrilak-ts009.herokuapp.com/api/ts-009/'\r\n\t//baseURL: 'http://localhost:5000/api/ts-009/'\r\n});","import React,{useState} from 'react'\r\nimport './Form.css'\r\nimport {postUser} from '../../redux/action/User'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Form = ({postUser}) => {\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    tingkat: \"\",\r\n    cabang: \"\",\r\n    lulus: \"\",\r\n    nohp: \"\",\r\n  });\r\n\r\n  const onChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const { name,tingkat,cabang,lulus,nohp } = formData;\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    postUser(\r\n      name,\r\n      tingkat,\r\n      cabang,\r\n      lulus,\r\n      nohp,\r\n    );\r\n    setFormData({\r\n    name: \"\",\r\n    tingkat: \"\",\r\n    cabang: \"\",\r\n    lulus: \"\",\r\n    nohp: \"\",\r\n    })\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={(e)=>onSubmit(e)}>\r\n          <div className='form-group'>\r\n              <input\r\n            type=\"text\"\r\n            placeholder='Nama Lengkap'\r\n            value={name}\r\n            name=\"name\"\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          </div>\r\n          <div className='form-group'>\r\n               <input\r\n            type='text'\r\n            placeholder='Ketingkatan'\r\n            value={tingkat}\r\n            name=\"tingkat\"\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          </div>\r\n          <div className='form-group'>\r\n              <input\r\n            type=\"text\"\r\n            placeholder='Cabang/Daerah/Wilayah'\r\n            value={cabang}\r\n            name=\"cabang\"\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          </div>\r\n          <div className='form-group'>\r\n             <input\r\n            type=\"type\"\r\n            placeholder='Lulus Muallimin'\r\n            value={lulus}\r\n            name=\"lulus\"\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <div className='form-group'>\r\n             <input\r\n            type=\"type\"\r\n            placeholder='No HP/WA'\r\n            value={nohp}\r\n            name=\"nohp\"\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          </div>\r\n          </div>\r\n          <div className='btn-Submit'>\r\n              <button>Submit</button>\r\n          </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  \r\n});\r\nexport default connect(mapStateToProps, { postUser })(Form);","import {\r\n    POST_USER_FAIL,\r\n    POST_USER_SUCCESS,\r\n    GET_USER_FAIL,\r\n    GET_USER_SUCCESS\r\n  } from \"./types\";\r\n\r\n\r\nimport { API } from \"../../config/api\";\r\n\r\nexport const postUser = (\r\n    name,\r\n    tingkat,\r\n    cabang,\r\n    lulus,\r\n    nohp,\r\n  ) => async (dispatch) => {\r\n    \r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n      name,\r\n      tingkat,\r\n      cabang,\r\n      lulus,\r\n      nohp,\r\n    });\r\n\r\n    try {\r\n        const res = await API.post(\"/user\", body, config);\r\n        dispatch({\r\n          type: POST_USER_SUCCESS,\r\n          payload: res.user,\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: POST_USER_FAIL,\r\n          payload: 'error'\r\n        });\r\n      }\r\n};\r\n\r\nexport const getUser = () => async (dispatch)=>{\r\n  try {\r\n    const res = await API.get(\"/user\");\r\n    dispatch({\r\n      type: GET_USER_SUCCESS,\r\n      payload: res.data.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_USER_FAIL,\r\n      payload: 'error',\r\n    });\r\n  }\r\n}","export const POST_USER_SUCCESS = 'POST_USER_SUCCESS';\r\nexport const POST_USER_FAIL = \"POST_USER_FAIL\";\r\n\r\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\r\nexport const GET_USER_FAIL = \"GET_USER_FAIL\";","import React, { useEffect,useState} from 'react'\r\nimport {DATA} from '../FakeData/Data'\r\nimport './Render.css'\r\nimport {getUser} from '../../redux/action/User'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Render = ({getUser,users:{user,loading}}) => {\r\n  useEffect(()=>{\r\n    getUser()\r\n  },[])\r\n  \r\n  const [formData, setFormData] = useState({\r\n    subcategoryId: \"Tahun\"\r\n  });\r\n  const {subcategoryId} = formData;\r\n\r\n  let A = subcategoryId\r\n  let C = null\r\n\r\n  if (A == 'Tahun' ){\r\n    C = [...user]\r\n  }else{\r\n    let B = [...user] \r\n    C = B.filter((el)=>el.lulus === subcategoryId )\r\n  }\r\n\r\n  ;\r\n\r\n  const onChange = (e) => {\r\n      setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  return (\r\n    <div>\r\n      <div style ={{paddingTop:20}}>\r\n        <select\r\n          style={{width:100,borderRadius:30,borderWidth:2,borderColor:'#3399ff'}}\r\n          name='subcategoryId'\r\n          onChange={(e) => {\r\n              onChange(e);\r\n          }}\r\n        >\r\n        <option>Tahun</option>\r\n                {loading ? (<option>WIAT FOR LOADING</option>):(\r\n                    user.map((Allcategory) => (\r\n                        <option value={Allcategory.lulus} key={Allcategory.id}>\r\n                            {Allcategory.lulus}\r\n                        </option>\r\n                    ))\r\n                )}\r\n        </select>\r\n      </div>\r\n      <div style={{paddingTop:30}}>\r\n          {C.map((data)=>\r\n          <>\r\n            <div className=\"dropdown\">\r\n                <div>\r\n                    <button className=\"dropbtn\">{data.name}</button>\r\n                    <p>{data.lulus}</p>\r\n                </div>\r\n                <div className=\"dropdown-content\">\r\n                    <a href=\"#\">{data.tingkat}</a>\r\n                    <a href=\"#\">{data.cabang}</a>\r\n                    <a href=\"#\">{data.nohp}</a>\r\n                </div>\r\n            </div>\r\n          </>\r\n          )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  users: state.User\r\n});\r\nexport default connect(mapStateToProps, { getUser })(Render);\r\n","import {\r\n    GET_USER_FAIL,\r\n    GET_USER_SUCCESS,\r\n    POST_USER_FAIL,\r\n    POST_USER_SUCCESS} from '../action/types'\r\n\r\n\r\n    const initialState = {\r\n        loading: true,\r\n        user: [],\r\n        error:null,\r\n      };\r\n\r\n      export default function (state = initialState, action) {\r\n        const { type, payload } = action;\r\n      \r\n        switch (type) {\r\n          case GET_USER_SUCCESS:\r\n            return {\r\n              ...state,\r\n              loading: false,\r\n              user: payload,\r\n            };\r\n         case GET_USER_FAIL:\r\n             return{\r\n                ...state,\r\n                loading:true,\r\n                user:payload\r\n             };\r\n         case POST_USER_SUCCESS:\r\n             return{\r\n                 ...state\r\n             }\r\n         case POST_USER_FAIL:\r\n             return{\r\n                 ...state\r\n             }\r\n        default:\r\n            return state;\r\n        }\r\n      }\r\n      ","import { combineReducers } from \"redux\";\r\n\r\n\r\nimport User from \"./User\";\r\n\r\n\r\nexport default combineReducers({User});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducer';\r\n\r\nconst initialState = {}; \r\n\r\nconst middleware = [ thunk ];\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React,{useState}from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport Render from './components/Render/Render'\nimport Img from './img/logo.png'\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/store\";\n\nfunction App() {\n  const [slide,setSlide]=useState(false)\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n      <div className='text'>\n        <p >Alumni Tapak Suci Mu'allimin</p>\n      </div>\n      <img src={Img} style={{height:100,width:70}} onClick={()=>setSlide(!slide)}/>\n     <div>\n     \n       {!slide && <Form/>}\n       {slide && <Render/>}\n     </div>\n    </div>\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}